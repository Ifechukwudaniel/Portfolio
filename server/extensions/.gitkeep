input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

type Article {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  description: String!
  content: String!
  slug: String!
  category: Category
  image: UploadFile
  author: Writer
  state: String
  published_at: DateTime
}

type ArticleConnection {
  values: [Article]
  groupBy: ArticleGroupBy
  aggregate: ArticleAggregator
}

type ArticleAggregator {
  count: Int
  totalCount: Int
}

type ArticleGroupBy {
  id: [ArticleConnectionId]
  _id: [ArticleConnection_id]
  createdAt: [ArticleConnectionCreatedAt]
  updatedAt: [ArticleConnectionUpdatedAt]
  title: [ArticleConnectionTitle]
  description: [ArticleConnectionDescription]
  content: [ArticleConnectionContent]
  slug: [ArticleConnectionSlug]
  category: [ArticleConnectionCategory]
  image: [ArticleConnectionImage]
  author: [ArticleConnectionAuthor]
  state: [ArticleConnectionState]
  published_at: [ArticleConnectionPublished_at]
}

type ArticleConnectionId {
  key: ID
  connection: ArticleConnection
}

type ArticleConnection_id {
  key: ID
  connection: ArticleConnection
}

type ArticleConnectionCreatedAt {
  key: DateTime
  connection: ArticleConnection
}

type ArticleConnectionUpdatedAt {
  key: DateTime
  connection: ArticleConnection
}

type ArticleConnectionTitle {
  key: String
  connection: ArticleConnection
}

type ArticleConnectionDescription {
  key: String
  connection: ArticleConnection
}

type ArticleConnectionContent {
  key: String
  connection: ArticleConnection
}

type ArticleConnectionSlug {
  key: String
  connection: ArticleConnection
}

type ArticleConnectionCategory {
  key: ID
  connection: ArticleConnection
}

type ArticleConnectionImage {
  key: ID
  connection: ArticleConnection
}

type ArticleConnectionAuthor {
  key: ID
  connection: ArticleConnection
}

type ArticleConnectionState {
  key: String
  connection: ArticleConnection
}

type ArticleConnectionPublished_at {
  key: DateTime
  connection: ArticleConnection
}

input ArticleInput {
  title: String!
  description: String!
  content: String!
  slug: String!
  category: ID
  image: ID
  author: ID
  state: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editArticleInput {
  title: String
  description: String
  content: String
  slug: String
  category: ID
  image: ID
  author: ID
  state: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createArticleInput {
  data: ArticleInput
}

type createArticlePayload {
  article: Article
}

input updateArticleInput {
  where: InputID
  data: editArticleInput
}

type updateArticlePayload {
  article: Article
}

input deleteArticleInput {
  where: InputID
}

type deleteArticlePayload {
  article: Article
}

type Books {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  description: String
  published_at: DateTime
  book(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

type BooksConnection {
  values: [Books]
  groupBy: BooksGroupBy
  aggregate: BooksAggregator
}

type BooksAggregator {
  count: Int
  totalCount: Int
}

type BooksGroupBy {
  id: [BooksConnectionId]
  _id: [BooksConnection_id]
  createdAt: [BooksConnectionCreatedAt]
  updatedAt: [BooksConnectionUpdatedAt]
  name: [BooksConnectionName]
  description: [BooksConnectionDescription]
  published_at: [BooksConnectionPublished_at]
}

type BooksConnectionId {
  key: ID
  connection: BooksConnection
}

type BooksConnection_id {
  key: ID
  connection: BooksConnection
}

type BooksConnectionCreatedAt {
  key: DateTime
  connection: BooksConnection
}

type BooksConnectionUpdatedAt {
  key: DateTime
  connection: BooksConnection
}

type BooksConnectionName {
  key: String
  connection: BooksConnection
}

type BooksConnectionDescription {
  key: String
  connection: BooksConnection
}

type BooksConnectionPublished_at {
  key: DateTime
  connection: BooksConnection
}

input BookInput {
  book: [ID]
  name: String
  description: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editBookInput {
  book: [ID]
  name: String
  description: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createBookInput {
  data: BookInput
}

type createBookPayload {
  book: Books
}

input updateBookInput {
  where: InputID
  data: editBookInput
}

type updateBookPayload {
  book: Books
}

input deleteBookInput {
  where: InputID
}

type deleteBookPayload {
  book: Books
}

type Category {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  slug: String!
  articles(sort: String, limit: Int, start: Int, where: JSON): [Article]
}

type CategoryConnection {
  values: [Category]
  groupBy: CategoryGroupBy
  aggregate: CategoryAggregator
}

type CategoryAggregator {
  count: Int
  totalCount: Int
}

type CategoryGroupBy {
  id: [CategoryConnectionId]
  _id: [CategoryConnection_id]
  createdAt: [CategoryConnectionCreatedAt]
  updatedAt: [CategoryConnectionUpdatedAt]
  name: [CategoryConnectionName]
  slug: [CategoryConnectionSlug]
}

type CategoryConnectionId {
  key: ID
  connection: CategoryConnection
}

type CategoryConnection_id {
  key: ID
  connection: CategoryConnection
}

type CategoryConnectionCreatedAt {
  key: DateTime
  connection: CategoryConnection
}

type CategoryConnectionUpdatedAt {
  key: DateTime
  connection: CategoryConnection
}

type CategoryConnectionName {
  key: String
  connection: CategoryConnection
}

type CategoryConnectionSlug {
  key: String
  connection: CategoryConnection
}

input CategoryInput {
  name: String!
  slug: String!
  articles: [ID]
  created_by: ID
  updated_by: ID
}

input editCategoryInput {
  name: String
  slug: String
  articles: [ID]
  created_by: ID
  updated_by: ID
}

input createCategoryInput {
  data: CategoryInput
}

type createCategoryPayload {
  category: Category
}

input updateCategoryInput {
  where: InputID
  data: editCategoryInput
}

type updateCategoryPayload {
  category: Category
}

input deleteCategoryInput {
  where: InputID
}

type deleteCategoryPayload {
  category: Category
}

type Course {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  course: String
  cutOfMark: Int
  published_at: DateTime
}

type CourseConnection {
  values: [Course]
  groupBy: CourseGroupBy
  aggregate: CourseAggregator
}

type CourseAggregator {
  count: Int
  totalCount: Int
  sum: CourseAggregatorSum
  avg: CourseAggregatorAvg
  min: CourseAggregatorMin
  max: CourseAggregatorMax
}

type CourseAggregatorSum {
  cutOfMark: Float
}

type CourseAggregatorAvg {
  cutOfMark: Float
}

type CourseAggregatorMin {
  cutOfMark: Float
}

type CourseAggregatorMax {
  cutOfMark: Float
}

type CourseGroupBy {
  id: [CourseConnectionId]
  _id: [CourseConnection_id]
  createdAt: [CourseConnectionCreatedAt]
  updatedAt: [CourseConnectionUpdatedAt]
  course: [CourseConnectionCourse]
  cutOfMark: [CourseConnectionCutOfMark]
  published_at: [CourseConnectionPublished_at]
}

type CourseConnectionId {
  key: ID
  connection: CourseConnection
}

type CourseConnection_id {
  key: ID
  connection: CourseConnection
}

type CourseConnectionCreatedAt {
  key: DateTime
  connection: CourseConnection
}

type CourseConnectionUpdatedAt {
  key: DateTime
  connection: CourseConnection
}

type CourseConnectionCourse {
  key: String
  connection: CourseConnection
}

type CourseConnectionCutOfMark {
  key: Int
  connection: CourseConnection
}

type CourseConnectionPublished_at {
  key: DateTime
  connection: CourseConnection
}

input CourseInput {
  course: String
  cutOfMark: Int
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editCourseInput {
  course: String
  cutOfMark: Int
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createCourseInput {
  data: CourseInput
}

type createCoursePayload {
  course: Course
}

input updateCourseInput {
  where: InputID
  data: editCourseInput
}

type updateCoursePayload {
  course: Course
}

input deleteCourseInput {
  where: InputID
}

type deleteCoursePayload {
  course: Course
}

type Global {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  favicon: UploadFile
  siteName: String!
  defaultSeo: ComponentSharedSeo
}

input GlobalInput {
  favicon: ID
  siteName: String!
  defaultSeo: ComponentSharedSeoInput!
  created_by: ID
  updated_by: ID
}

input editGlobalInput {
  favicon: ID
  siteName: String
  defaultSeo: editComponentSharedSeoInput
  created_by: ID
  updated_by: ID
}

input updateGlobalInput {
  data: editGlobalInput
}

type updateGlobalPayload {
  global: Global
}

type deleteGlobalPayload {
  global: Global
}

type Homepage {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  seo: ComponentSharedSeo
  hero: ComponentSectionsHero
}

input HomepageInput {
  seo: ComponentSharedSeoInput
  hero: ComponentSectionsHeroInput!
  created_by: ID
  updated_by: ID
}

input editHomepageInput {
  seo: editComponentSharedSeoInput
  hero: editComponentSectionsHeroInput
  created_by: ID
  updated_by: ID
}

input updateHomepageInput {
  data: editHomepageInput
}

type updateHomepagePayload {
  homepage: Homepage
}

type deleteHomepagePayload {
  homepage: Homepage
}

type MapApi {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  published_at: DateTime
}

input MapApiInput {
  apiKey: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editMapApiInput {
  apiKey: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updateMapApiInput {
  data: editMapApiInput
}

type updateMapApiPayload {
  mapApi: MapApi
}

type deleteMapApiPayload {
  mapApi: MapApi
}

type Options {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  option: String
  isCorrect: Boolean!
  published_at: DateTime
}

type OptionsConnection {
  values: [Options]
  groupBy: OptionsGroupBy
  aggregate: OptionsAggregator
}

type OptionsAggregator {
  count: Int
  totalCount: Int
}

type OptionsGroupBy {
  id: [OptionsConnectionId]
  _id: [OptionsConnection_id]
  createdAt: [OptionsConnectionCreatedAt]
  updatedAt: [OptionsConnectionUpdatedAt]
  option: [OptionsConnectionOption]
  isCorrect: [OptionsConnectionIsCorrect]
  published_at: [OptionsConnectionPublished_at]
}

type OptionsConnectionId {
  key: ID
  connection: OptionsConnection
}

type OptionsConnection_id {
  key: ID
  connection: OptionsConnection
}

type OptionsConnectionCreatedAt {
  key: DateTime
  connection: OptionsConnection
}

type OptionsConnectionUpdatedAt {
  key: DateTime
  connection: OptionsConnection
}

type OptionsConnectionOption {
  key: String
  connection: OptionsConnection
}

type OptionsConnectionIsCorrect {
  key: Boolean
  connection: OptionsConnection
}

type OptionsConnectionPublished_at {
  key: DateTime
  connection: OptionsConnection
}

input OptionInput {
  option: String
  isCorrect: Boolean!
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editOptionInput {
  option: String
  isCorrect: Boolean
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createOptionInput {
  data: OptionInput
}

type createOptionPayload {
  option: Options
}

input updateOptionInput {
  where: InputID
  data: editOptionInput
}

type updateOptionPayload {
  option: Options
}

input deleteOptionInput {
  where: InputID
}

type deleteOptionPayload {
  option: Options
}

type Passages {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  content: String
  published_at: DateTime
}

type PassagesConnection {
  values: [Passages]
  groupBy: PassagesGroupBy
  aggregate: PassagesAggregator
}

type PassagesAggregator {
  count: Int
  totalCount: Int
}

type PassagesGroupBy {
  id: [PassagesConnectionId]
  _id: [PassagesConnection_id]
  createdAt: [PassagesConnectionCreatedAt]
  updatedAt: [PassagesConnectionUpdatedAt]
  content: [PassagesConnectionContent]
  published_at: [PassagesConnectionPublished_at]
}

type PassagesConnectionId {
  key: ID
  connection: PassagesConnection
}

type PassagesConnection_id {
  key: ID
  connection: PassagesConnection
}

type PassagesConnectionCreatedAt {
  key: DateTime
  connection: PassagesConnection
}

type PassagesConnectionUpdatedAt {
  key: DateTime
  connection: PassagesConnection
}

type PassagesConnectionContent {
  key: String
  connection: PassagesConnection
}

type PassagesConnectionPublished_at {
  key: DateTime
  connection: PassagesConnection
}

input PassageInput {
  content: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editPassageInput {
  content: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createPassageInput {
  data: PassageInput
}

type createPassagePayload {
  passage: Passages
}

input updatePassageInput {
  where: InputID
  data: editPassageInput
}

type updatePassagePayload {
  passage: Passages
}

input deletePassageInput {
  where: InputID
}

type deletePassagePayload {
  passage: Passages
}

enum ENUM_PINS_USEDON {
  Mobile
  Web
  Desktop
}

type Pins {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  generatedBy: AdminUser
  pin: String
  generatedOn: DateTime
  expiresOn: DateTime
  used: Boolean
  usedOn: ENUM_PINS_USEDON
}

type PinsConnection {
  values: [Pins]
  groupBy: PinsGroupBy
  aggregate: PinsAggregator
}

type PinsAggregator {
  count: Int
  totalCount: Int
}

type PinsGroupBy {
  id: [PinsConnectionId]
  _id: [PinsConnection_id]
  createdAt: [PinsConnectionCreatedAt]
  updatedAt: [PinsConnectionUpdatedAt]
  generatedBy: [PinsConnectionGeneratedBy]
  pin: [PinsConnectionPin]
  generatedOn: [PinsConnectionGeneratedOn]
  expiresOn: [PinsConnectionExpiresOn]
  used: [PinsConnectionUsed]
  usedOn: [PinsConnectionUsedOn]
}

type PinsConnectionId {
  key: ID
  connection: PinsConnection
}

type PinsConnection_id {
  key: ID
  connection: PinsConnection
}

type PinsConnectionCreatedAt {
  key: DateTime
  connection: PinsConnection
}

type PinsConnectionUpdatedAt {
  key: DateTime
  connection: PinsConnection
}

type PinsConnectionGeneratedBy {
  key: ID
  connection: PinsConnection
}

type PinsConnectionPin {
  key: String
  connection: PinsConnection
}

type PinsConnectionGeneratedOn {
  key: DateTime
  connection: PinsConnection
}

type PinsConnectionExpiresOn {
  key: DateTime
  connection: PinsConnection
}

type PinsConnectionUsed {
  key: Boolean
  connection: PinsConnection
}

type PinsConnectionUsedOn {
  key: String
  connection: PinsConnection
}

input PinInput {
  generatedBy: ID
  pin: String
  generatedOn: DateTime
  expiresOn: DateTime
  used: Boolean
  usedOn: ENUM_PINS_USEDON
  created_by: ID
  updated_by: ID
}

input editPinInput {
  generatedBy: ID
  pin: String
  generatedOn: DateTime
  expiresOn: DateTime
  used: Boolean
  usedOn: ENUM_PINS_USEDON
  created_by: ID
  updated_by: ID
}

input createPinInput {
  data: PinInput
}

type createPinPayload {
  pin: Pins
}

input updatePinInput {
  where: InputID
  data: editPinInput
}

type updatePinPayload {
  pin: Pins
}

input deletePinInput {
  where: InputID
}

type deletePinPayload {
  pin: Pins
}

enum ENUM_QUESTIONS_EXAMTYPE {
  JAMB
  WEAC
  NECO
  POST
  UTME
  IJMB
}

type Questions {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  question: String
  answer: String
  uploadDate: Date
  year: String
  examType: ENUM_QUESTIONS_EXAMTYPE
  locale: String
  published_at: DateTime
  options(sort: String, limit: Int, start: Int, where: JSON): [Options]
  topics(sort: String, limit: Int, start: Int, where: JSON): [Topics]
  passage(sort: String, limit: Int, start: Int, where: JSON): [Passages]
  localizations(sort: String, limit: Int, start: Int, where: JSON): [Questions]
}

type QuestionsConnection {
  values: [Questions]
  groupBy: QuestionsGroupBy
  aggregate: QuestionsAggregator
}

type QuestionsAggregator {
  count: Int
  totalCount: Int
}

type QuestionsGroupBy {
  id: [QuestionsConnectionId]
  _id: [QuestionsConnection_id]
  createdAt: [QuestionsConnectionCreatedAt]
  updatedAt: [QuestionsConnectionUpdatedAt]
  question: [QuestionsConnectionQuestion]
  answer: [QuestionsConnectionAnswer]
  uploadDate: [QuestionsConnectionUploadDate]
  year: [QuestionsConnectionYear]
  examType: [QuestionsConnectionExamType]
  locale: [QuestionsConnectionLocale]
  published_at: [QuestionsConnectionPublished_at]
}

type QuestionsConnectionId {
  key: ID
  connection: QuestionsConnection
}

type QuestionsConnection_id {
  key: ID
  connection: QuestionsConnection
}

type QuestionsConnectionCreatedAt {
  key: DateTime
  connection: QuestionsConnection
}

type QuestionsConnectionUpdatedAt {
  key: DateTime
  connection: QuestionsConnection
}

type QuestionsConnectionQuestion {
  key: String
  connection: QuestionsConnection
}

type QuestionsConnectionAnswer {
  key: String
  connection: QuestionsConnection
}

type QuestionsConnectionUploadDate {
  key: ID
  connection: QuestionsConnection
}

type QuestionsConnectionYear {
  key: String
  connection: QuestionsConnection
}

type QuestionsConnectionExamType {
  key: String
  connection: QuestionsConnection
}

type QuestionsConnectionLocale {
  key: String
  connection: QuestionsConnection
}

type QuestionsConnectionPublished_at {
  key: DateTime
  connection: QuestionsConnection
}

input QuestionInput {
  question: String
  answer: String
  uploadDate: Date
  options: [ID]
  topics: [ID]
  passage: [ID]
  year: String
  examType: ENUM_QUESTIONS_EXAMTYPE
  localizations: [ID]
  locale: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editQuestionInput {
  question: String
  answer: String
  uploadDate: Date
  options: [ID]
  topics: [ID]
  passage: [ID]
  year: String
  examType: ENUM_QUESTIONS_EXAMTYPE
  localizations: [ID]
  locale: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createQuestionInput {
  data: QuestionInput
}

type createQuestionPayload {
  question: Questions
}

input updateQuestionInput {
  where: InputID
  data: editQuestionInput
}

type updateQuestionPayload {
  question: Questions
}

input deleteQuestionInput {
  where: InputID
}

type deleteQuestionPayload {
  question: Questions
}

enum ENUM_SCHOOLS_SCHOOLTYPE {
  Universities
  Polytechnics
  College
  Of
  Education
  Innovative
  Enterprise
  Institute
}

type Schools {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  description: String
  state: String
  address: String
  phoneNumber: String
  googleMapUrl: String
  schoolPortal: String
  schoolType: ENUM_SCHOOLS_SCHOOLTYPE
  published_at: DateTime
  courses(sort: String, limit: Int, start: Int, where: JSON): [Course]
}

type SchoolsConnection {
  values: [Schools]
  groupBy: SchoolsGroupBy
  aggregate: SchoolsAggregator
}

type SchoolsAggregator {
  count: Int
  totalCount: Int
}

type SchoolsGroupBy {
  id: [SchoolsConnectionId]
  _id: [SchoolsConnection_id]
  createdAt: [SchoolsConnectionCreatedAt]
  updatedAt: [SchoolsConnectionUpdatedAt]
  name: [SchoolsConnectionName]
  description: [SchoolsConnectionDescription]
  state: [SchoolsConnectionState]
  address: [SchoolsConnectionAddress]
  phoneNumber: [SchoolsConnectionPhoneNumber]
  googleMapUrl: [SchoolsConnectionGoogleMapUrl]
  schoolPortal: [SchoolsConnectionSchoolPortal]
  schoolType: [SchoolsConnectionSchoolType]
  published_at: [SchoolsConnectionPublished_at]
}

type SchoolsConnectionId {
  key: ID
  connection: SchoolsConnection
}

type SchoolsConnection_id {
  key: ID
  connection: SchoolsConnection
}

type SchoolsConnectionCreatedAt {
  key: DateTime
  connection: SchoolsConnection
}

type SchoolsConnectionUpdatedAt {
  key: DateTime
  connection: SchoolsConnection
}

type SchoolsConnectionName {
  key: String
  connection: SchoolsConnection
}

type SchoolsConnectionDescription {
  key: String
  connection: SchoolsConnection
}

type SchoolsConnectionState {
  key: String
  connection: SchoolsConnection
}

type SchoolsConnectionAddress {
  key: String
  connection: SchoolsConnection
}

type SchoolsConnectionPhoneNumber {
  key: String
  connection: SchoolsConnection
}

type SchoolsConnectionGoogleMapUrl {
  key: String
  connection: SchoolsConnection
}

type SchoolsConnectionSchoolPortal {
  key: String
  connection: SchoolsConnection
}

type SchoolsConnectionSchoolType {
  key: String
  connection: SchoolsConnection
}

type SchoolsConnectionPublished_at {
  key: DateTime
  connection: SchoolsConnection
}

input SchoolInput {
  name: String
  description: String
  state: String
  address: String
  phoneNumber: String
  googleMapUrl: String
  schoolPortal: String
  schoolType: ENUM_SCHOOLS_SCHOOLTYPE
  courses: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editSchoolInput {
  name: String
  description: String
  state: String
  address: String
  phoneNumber: String
  googleMapUrl: String
  schoolPortal: String
  schoolType: ENUM_SCHOOLS_SCHOOLTYPE
  courses: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createSchoolInput {
  data: SchoolInput
}

type createSchoolPayload {
  school: Schools
}

input updateSchoolInput {
  where: InputID
  data: editSchoolInput
}

type updateSchoolPayload {
  school: Schools
}

input deleteSchoolInput {
  where: InputID
}

type deleteSchoolPayload {
  school: Schools
}

type Subjects {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  subject: String
  questions(sort: String, limit: Int, start: Int, where: JSON): [Questions]
  topics(sort: String, limit: Int, start: Int, where: JSON): [Topics]
}

type SubjectsConnection {
  values: [Subjects]
  groupBy: SubjectsGroupBy
  aggregate: SubjectsAggregator
}

type SubjectsAggregator {
  count: Int
  totalCount: Int
}

type SubjectsGroupBy {
  id: [SubjectsConnectionId]
  _id: [SubjectsConnection_id]
  createdAt: [SubjectsConnectionCreatedAt]
  updatedAt: [SubjectsConnectionUpdatedAt]
  subject: [SubjectsConnectionSubject]
}

type SubjectsConnectionId {
  key: ID
  connection: SubjectsConnection
}

type SubjectsConnection_id {
  key: ID
  connection: SubjectsConnection
}

type SubjectsConnectionCreatedAt {
  key: DateTime
  connection: SubjectsConnection
}

type SubjectsConnectionUpdatedAt {
  key: DateTime
  connection: SubjectsConnection
}

type SubjectsConnectionSubject {
  key: String
  connection: SubjectsConnection
}

input SubjectInput {
  subject: String
  questions: [ID]
  topics: [ID]
  created_by: ID
  updated_by: ID
}

input editSubjectInput {
  subject: String
  questions: [ID]
  topics: [ID]
  created_by: ID
  updated_by: ID
}

input createSubjectInput {
  data: SubjectInput
}

type createSubjectPayload {
  subject: Subjects
}

input updateSubjectInput {
  where: InputID
  data: editSubjectInput
}

type updateSubjectPayload {
  subject: Subjects
}

input deleteSubjectInput {
  where: InputID
}

type deleteSubjectPayload {
  subject: Subjects
}

type Topics {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  topic: String
}

type TopicsConnection {
  values: [Topics]
  groupBy: TopicsGroupBy
  aggregate: TopicsAggregator
}

type TopicsAggregator {
  count: Int
  totalCount: Int
}

type TopicsGroupBy {
  id: [TopicsConnectionId]
  _id: [TopicsConnection_id]
  createdAt: [TopicsConnectionCreatedAt]
  updatedAt: [TopicsConnectionUpdatedAt]
  topic: [TopicsConnectionTopic]
}

type TopicsConnectionId {
  key: ID
  connection: TopicsConnection
}

type TopicsConnection_id {
  key: ID
  connection: TopicsConnection
}

type TopicsConnectionCreatedAt {
  key: DateTime
  connection: TopicsConnection
}

type TopicsConnectionUpdatedAt {
  key: DateTime
  connection: TopicsConnection
}

type TopicsConnectionTopic {
  key: String
  connection: TopicsConnection
}

input TopicInput {
  topic: String
  created_by: ID
  updated_by: ID
}

input editTopicInput {
  topic: String
  created_by: ID
  updated_by: ID
}

input createTopicInput {
  data: TopicInput
}

type createTopicPayload {
  topic: Topics
}

input updateTopicInput {
  where: InputID
  data: editTopicInput
}

type updateTopicPayload {
  topic: Topics
}

input deleteTopicInput {
  where: InputID
}

type deleteTopicPayload {
  topic: Topics
}

type Writer {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  picture: UploadFile
  email: String
  articles(sort: String, limit: Int, start: Int, where: JSON): [Article]
}

type WriterConnection {
  values: [Writer]
  groupBy: WriterGroupBy
  aggregate: WriterAggregator
}

type WriterAggregator {
  count: Int
  totalCount: Int
}

type WriterGroupBy {
  id: [WriterConnectionId]
  _id: [WriterConnection_id]
  createdAt: [WriterConnectionCreatedAt]
  updatedAt: [WriterConnectionUpdatedAt]
  name: [WriterConnectionName]
  picture: [WriterConnectionPicture]
  email: [WriterConnectionEmail]
}

type WriterConnectionId {
  key: ID
  connection: WriterConnection
}

type WriterConnection_id {
  key: ID
  connection: WriterConnection
}

type WriterConnectionCreatedAt {
  key: DateTime
  connection: WriterConnection
}

type WriterConnectionUpdatedAt {
  key: DateTime
  connection: WriterConnection
}

type WriterConnectionName {
  key: String
  connection: WriterConnection
}

type WriterConnectionPicture {
  key: ID
  connection: WriterConnection
}

type WriterConnectionEmail {
  key: String
  connection: WriterConnection
}

input WriterInput {
  name: String
  picture: ID
  articles: [ID]
  email: String
  created_by: ID
  updated_by: ID
}

input editWriterInput {
  name: String
  picture: ID
  articles: [ID]
  email: String
  created_by: ID
  updated_by: ID
}

input createWriterInput {
  data: WriterInput
}

type createWriterPayload {
  writer: Writer
}

input updateWriterInput {
  where: InputID
  data: editWriterInput
}

type updateWriterPayload {
  writer: Writer
}

input deleteWriterInput {
  where: InputID
}

type deleteWriterPayload {
  writer: Writer
}

type I18NLocale {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  code: String
}

input LocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

input editLocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

type UploadFile {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

type UsersPermissionsPermission {
  id: ID!
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type UsersPermissionsUser {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  profilePic: UploadFile
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  _id: [UsersPermissionsUserConnection_id]
  createdAt: [UsersPermissionsUserConnectionCreatedAt]
  updatedAt: [UsersPermissionsUserConnectionUpdatedAt]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
  profilePic: [UsersPermissionsUserConnectionProfilePic]
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreatedAt {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdatedAt {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProfilePic {
  key: ID
  connection: UsersPermissionsUserConnection
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  profilePic: ID
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  profilePic: ID
  created_by: ID
  updated_by: ID
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

type ComponentSectionsHero {
  id: ID!
  _id: ID!
}

input ComponentSectionsHeroInput {
  _: String
}

input editComponentSectionsHeroInput {
  id: ID
}

type ComponentSharedSeo {
  id: ID!
  _id: ID!
  metaTitle: String!
  metaDescription: String!
  shareImage: UploadFile
}

input ComponentSharedSeoInput {
  metaTitle: String!
  metaDescription: String!
  shareImage: ID
}

input editComponentSharedSeoInput {
  id: ID
  metaTitle: String
  metaDescription: String
  shareImage: ID
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | Article | ArticleConnection | ArticleAggregator | ArticleGroupBy | ArticleConnectionId | ArticleConnection_id | ArticleConnectionCreatedAt | ArticleConnectionUpdatedAt | ArticleConnectionTitle | ArticleConnectionDescription | ArticleConnectionContent | ArticleConnectionSlug | ArticleConnectionCategory | ArticleConnectionImage | ArticleConnectionAuthor | ArticleConnectionState | ArticleConnectionPublished_at | createArticlePayload | updateArticlePayload | deleteArticlePayload | Books | BooksConnection | BooksAggregator | BooksGroupBy | BooksConnectionId | BooksConnection_id | BooksConnectionCreatedAt | BooksConnectionUpdatedAt | BooksConnectionName | BooksConnectionDescription | BooksConnectionPublished_at | createBookPayload | updateBookPayload | deleteBookPayload | Category | CategoryConnection | CategoryAggregator | CategoryGroupBy | CategoryConnectionId | CategoryConnection_id | CategoryConnectionCreatedAt | CategoryConnectionUpdatedAt | CategoryConnectionName | CategoryConnectionSlug | createCategoryPayload | updateCategoryPayload | deleteCategoryPayload | Course | CourseConnection | CourseAggregator | CourseAggregatorSum | CourseAggregatorAvg | CourseAggregatorMin | CourseAggregatorMax | CourseGroupBy | CourseConnectionId | CourseConnection_id | CourseConnectionCreatedAt | CourseConnectionUpdatedAt | CourseConnectionCourse | CourseConnectionCutOfMark | CourseConnectionPublished_at | createCoursePayload | updateCoursePayload | deleteCoursePayload | Global | updateGlobalPayload | deleteGlobalPayload | Homepage | updateHomepagePayload | deleteHomepagePayload | MapApi | updateMapApiPayload | deleteMapApiPayload | Options | OptionsConnection | OptionsAggregator | OptionsGroupBy | OptionsConnectionId | OptionsConnection_id | OptionsConnectionCreatedAt | OptionsConnectionUpdatedAt | OptionsConnectionOption | OptionsConnectionIsCorrect | OptionsConnectionPublished_at | createOptionPayload | updateOptionPayload | deleteOptionPayload | Passages | PassagesConnection | PassagesAggregator | PassagesGroupBy | PassagesConnectionId | PassagesConnection_id | PassagesConnectionCreatedAt | PassagesConnectionUpdatedAt | PassagesConnectionContent | PassagesConnectionPublished_at | createPassagePayload | updatePassagePayload | deletePassagePayload | Pins | PinsConnection | PinsAggregator | PinsGroupBy | PinsConnectionId | PinsConnection_id | PinsConnectionCreatedAt | PinsConnectionUpdatedAt | PinsConnectionGeneratedBy | PinsConnectionPin | PinsConnectionGeneratedOn | PinsConnectionExpiresOn | PinsConnectionUsed | PinsConnectionUsedOn | createPinPayload | updatePinPayload | deletePinPayload | Questions | QuestionsConnection | QuestionsAggregator | QuestionsGroupBy | QuestionsConnectionId | QuestionsConnection_id | QuestionsConnectionCreatedAt | QuestionsConnectionUpdatedAt | QuestionsConnectionQuestion | QuestionsConnectionAnswer | QuestionsConnectionUploadDate | QuestionsConnectionYear | QuestionsConnectionExamType | QuestionsConnectionLocale | QuestionsConnectionPublished_at | createQuestionPayload | updateQuestionPayload | deleteQuestionPayload | Schools | SchoolsConnection | SchoolsAggregator | SchoolsGroupBy | SchoolsConnectionId | SchoolsConnection_id | SchoolsConnectionCreatedAt | SchoolsConnectionUpdatedAt | SchoolsConnectionName | SchoolsConnectionDescription | SchoolsConnectionState | SchoolsConnectionAddress | SchoolsConnectionPhoneNumber | SchoolsConnectionGoogleMapUrl | SchoolsConnectionSchoolPortal | SchoolsConnectionSchoolType | SchoolsConnectionPublished_at | createSchoolPayload | updateSchoolPayload | deleteSchoolPayload | Subjects | SubjectsConnection | SubjectsAggregator | SubjectsGroupBy | SubjectsConnectionId | SubjectsConnection_id | SubjectsConnectionCreatedAt | SubjectsConnectionUpdatedAt | SubjectsConnectionSubject | createSubjectPayload | updateSubjectPayload | deleteSubjectPayload | Topics | TopicsConnection | TopicsAggregator | TopicsGroupBy | TopicsConnectionId | TopicsConnection_id | TopicsConnectionCreatedAt | TopicsConnectionUpdatedAt | TopicsConnectionTopic | createTopicPayload | updateTopicPayload | deleteTopicPayload | Writer | WriterConnection | WriterAggregator | WriterGroupBy | WriterConnectionId | WriterConnection_id | WriterConnectionCreatedAt | WriterConnectionUpdatedAt | WriterConnectionName | WriterConnectionPicture | WriterConnectionEmail | createWriterPayload | updateWriterPayload | deleteWriterPayload | I18NLocale | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionCreatedAt | UsersPermissionsUserConnectionUpdatedAt | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionProfilePic | createUserPayload | updateUserPayload | deleteUserPayload | ComponentSectionsHero | ComponentSharedSeo

input InputID {
  id: ID!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}

type Query {
  article(id: ID!, publicationState: PublicationState): Article
  articles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Article]
  articlesConnection(sort: String, limit: Int, start: Int, where: JSON): ArticleConnection
  book(id: ID!, publicationState: PublicationState): Books
  books(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Books]
  booksConnection(sort: String, limit: Int, start: Int, where: JSON): BooksConnection
  category(id: ID!, publicationState: PublicationState): Category
  categories(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Category]
  categoriesConnection(sort: String, limit: Int, start: Int, where: JSON): CategoryConnection
  course(id: ID!, publicationState: PublicationState): Course
  courses(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Course]
  coursesConnection(sort: String, limit: Int, start: Int, where: JSON): CourseConnection
  global(publicationState: PublicationState): Global
  homepage(publicationState: PublicationState): Homepage
  mapApi(publicationState: PublicationState): MapApi
  option(id: ID!, publicationState: PublicationState): Options
  options(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Options]
  optionsConnection(sort: String, limit: Int, start: Int, where: JSON): OptionsConnection
  passage(id: ID!, publicationState: PublicationState): Passages
  passages(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Passages]
  passagesConnection(sort: String, limit: Int, start: Int, where: JSON): PassagesConnection
  pin(id: ID!, publicationState: PublicationState): Pins
  pins(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Pins]
  pinsConnection(sort: String, limit: Int, start: Int, where: JSON): PinsConnection
  question(id: ID!, publicationState: PublicationState): Questions
  questions(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState, locale: String): [Questions]
  questionsConnection(sort: String, limit: Int, start: Int, where: JSON, locale: String): QuestionsConnection
  school(id: ID!, publicationState: PublicationState): Schools
  schools(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Schools]
  schoolsConnection(sort: String, limit: Int, start: Int, where: JSON): SchoolsConnection
  subject(id: ID!, publicationState: PublicationState): Subjects
  subjects(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Subjects]
  subjectsConnection(sort: String, limit: Int, start: Int, where: JSON): SubjectsConnection
  topic(id: ID!, publicationState: PublicationState): Topics
  topics(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Topics]
  topicsConnection(sort: String, limit: Int, start: Int, where: JSON): TopicsConnection
  writer(id: ID!, publicationState: PublicationState): Writer
  writers(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Writer]
  writersConnection(sort: String, limit: Int, start: Int, where: JSON): WriterConnection
  files(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

type Mutation {
  createArticle(input: createArticleInput): createArticlePayload
  updateArticle(input: updateArticleInput): updateArticlePayload
  deleteArticle(input: deleteArticleInput): deleteArticlePayload
  createBook(input: createBookInput): createBookPayload
  updateBook(input: updateBookInput): updateBookPayload
  deleteBook(input: deleteBookInput): deleteBookPayload
  createCategory(input: createCategoryInput): createCategoryPayload
  updateCategory(input: updateCategoryInput): updateCategoryPayload
  deleteCategory(input: deleteCategoryInput): deleteCategoryPayload
  createCourse(input: createCourseInput): createCoursePayload
  updateCourse(input: updateCourseInput): updateCoursePayload
  deleteCourse(input: deleteCourseInput): deleteCoursePayload
  updateGlobal(input: updateGlobalInput): updateGlobalPayload
  deleteGlobal: deleteGlobalPayload
  updateHomepage(input: updateHomepageInput): updateHomepagePayload
  deleteHomepage: deleteHomepagePayload
  updateMapApi(input: updateMapApiInput): updateMapApiPayload
  deleteMapApi: deleteMapApiPayload
  createOption(input: createOptionInput): createOptionPayload
  updateOption(input: updateOptionInput): updateOptionPayload
  deleteOption(input: deleteOptionInput): deleteOptionPayload
  createPassage(input: createPassageInput): createPassagePayload
  updatePassage(input: updatePassageInput): updatePassagePayload
  deletePassage(input: deletePassageInput): deletePassagePayload
  createPin(input: createPinInput): createPinPayload
  updatePin(input: updatePinInput): updatePinPayload
  deletePin(input: deletePinInput): deletePinPayload
  createQuestion(input: createQuestionInput): createQuestionPayload
  updateQuestion(input: updateQuestionInput): updateQuestionPayload
  deleteQuestion(input: deleteQuestionInput): deleteQuestionPayload
  createSchool(input: createSchoolInput): createSchoolPayload
  updateSchool(input: updateSchoolInput): updateSchoolPayload
  deleteSchool(input: deleteSchoolInput): deleteSchoolPayload
  createSubject(input: createSubjectInput): createSubjectPayload
  updateSubject(input: updateSubjectInput): updateSubjectPayload
  deleteSubject(input: deleteSubjectInput): deleteSubjectPayload
  createTopic(input: createTopicInput): createTopicPayload
  updateTopic(input: updateTopicInput): updateTopicPayload
  deleteTopic(input: deleteTopicInput): deleteTopicPayload
  createWriter(input: createWriterInput): createWriterPayload
  updateWriter(input: updateWriterInput): updateWriterPayload
  deleteWriter(input: deleteWriterInput): deleteWriterPayload

  """Delete one file"""
  deleteFile(input: deleteFileInput): deleteFilePayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  createQuestionLocalization(input: updateQuestionInput!): Questions!
  upload(refId: ID, ref: String, field: String, source: String, info: FileInfoInput, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

"""The `Upload` scalar type represents a file upload."""
scalar Upload
